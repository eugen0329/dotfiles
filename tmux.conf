# ./.tmux.conf
#set -ga terminal-overrides ',scr*:smcup@:rmcup@' set -g terminal-overrides 'xterm*:smcup@:rmcup@' set -g terminal-overrides "xterm*:XT:smcup@:rmcup@:kUP5=\eOA:kDN5=\eOB:kLFT5=\eOD:kRIT5=\eOC"

###########
# Plugins
###########
if "[ -f ~/.tmux.d/tmux-yank/yank.tmux ]" "run ~/.tmux.d/tmux-yank/yank.tmux"
if "[ -f ~/.tmux.d/tmux-resurrect/resurrect.tmux ]" "run ~/.tmux.d/tmux-resurrect/resurrect.tmux"
  set -g @resurrect-strategy-vim 'session'  # for vim
  set -g @resurrect-strategy-nvim 'session' # for neovim


# For proper triggering vim focus events
set -g focus-events on
bind k run 'gnome-terminal-cursor-shape.sh block' \; kill-pane
bind C-k run 'gnome-terminal-cursor-shape.sh block' \; kill-pane



#############
# Options
#############

set -g default-terminal "screen-256color"

# Tmux custom scripts dir
PATH="/home/eugen/.tmux:$PATH"

set -g default-command /bin/bash
set -g default-shell /bin/bash

set-option -gw xterm-keys on

set -g history-limit 100000
# status bar refresh interval
set-option -g status-interval 10


#set-option -g display-time 1

# set -g quiet on
set -g monitor-activity off
set -g visual-activity off
#set -g display-time 1

# start windows and panes index from 1 (instead 0)
set -g base-index 1
set -g pane-base-index 1

# renumber windows when one is closed
set -g renumber-windows on

# Options for the mouse using
#setw -g mode-mouse on
#set -g mode-mouse on
#set -g mouse-select-pane on
#set -g mouse-select-window on 
#set -g mouse-resize-pane on
#

#set -g status on

set-option -g status-position bottom
# set-option -g status-utf8 on

# automatically set window tutles
set-window-option -g automatic-rename on
set-window-option -g set-titles on

# window highlight if it has new activity
set-option -g visual-activity on
set-window-option -g monitor-activity on
# center the status bar
set-option -g status-justify centre
# set-option -g status-justify left
set-option -g status-right-length 60
set-option -g status-left-length 60

set -s escape-time 0
set -g visual-activity off

##############
# Key mappings
##############
setw -g mode-keys vi # Use vi keybindings in copy and choice modes
#bind -t vi-copy 'v' begin-selection
#bind -t vi-copy 'C-v' rectangle-toggle
bind -n C-M-s copy-mode
set -s user-keys[6] "\e[36;2~"
bind -n User6 copy-mode

unbind -T copy-mode-vi v
unbind -T copy-mode-vi 'C-v'
bind -T copy-mode-vi 'v' send -X begin-selection
bind -T copy-mode-vi 'C-v' send -X rectangle-toggle


# unbind C-M-f
# bind -n C-M-f find-window


bind ^R source-file ~/.tmux.conf \; display-message "Config is reloaded"

###########
# Rearrange
###########
# Move tmux tab:
#   Alt-{<,>}(without pressing shift): left/right
set -s user-keys[4] "\e[34;2~"
set -s user-keys[5] "\e[35;2~"


## was
# bind -n M-, swap-window -t -1
# bind -n User4 swap-window -t -1
# bind -n M-. swap-window -t +1
# bind -n User5 swap-window -t +1

bind -n M-,   run "[ `tmux list-windows | head -n 1 | awk '{print $1}'` =  '#I:' ] && tmux move-window -t $((`tmux list-windows | tail -n 1 | awk '{print $1}' | sed 's/://'` + 1)) || tmux swap-window -t -1" \; refresh-client -S
bind -n User4 run "[ `tmux list-windows | head -n 1 | awk '{print $1}'` =  '#I:' ] && tmux move-window -t $((`tmux list-windows | tail -n 1 | awk '{print $1}' | sed 's/://'` + 1)) || tmux swap-window -t -1" \; refresh-client -S
bind -n M-. run "[ `tmux list-windows | awk '{print $1}' | tail -n 1` =  '#I:' ] && tmux move-window -t 0 || tmux swap-window -t +1" \; refresh-client -S
bind -n User5 run "[ `tmux list-windows | awk '{print $1}' | tail -n 1` =  '#I:' ] && tmux move-window -t 0 || tmux swap-window -t +1" \; refresh-client -S


# <prefix> Ctrl-o: rotate tmux tab content
bind C-O rotate-window \; refresh-client -S
# Ctrl-Alt-o: the same
bind -n C-M-o rotate-window \; refresh-client -S

# Break and merge windows and panes. ^ pulls a window into a horizontal pane,
# < pulls a window into a vertical pane, and > breaks it back out into its own 
# window.
bind < split-window -h \; choose-window 'kill-pane ; join-pane -hs %%'
bind > break-pane -d
bind-key ^ split-window -v \; choose-window 'kill-pane ; join-pane -vs %%'

############
# Navigation
############
# Select tmux tab
#   Ctrl-Alt-{h,l}: left/right with 
bind -n C-M-h select-window -t :- \; refresh-client -S
set -s user-keys[2] "\e[32;2~"
bind -n User2 select-window -t :- \; refresh-client -S

bind -n C-M-l select-window -t :+ \; refresh-client -S
set -s user-keys[3] "\e[33;2~"
bind -n User3 select-window -t :+ \; refresh-client -S
#   Alt-{1,2,..}: by number
bind-key -n M-1 select-window -t 1
bind-key -n M-2 select-window -t 2
bind-key -n M-3 select-window -t 3
bind-key -n M-4 select-window -t 4
bind-key -n M-5 select-window -t 5
bind-key -n M-6 select-window -t 6
bind-key -n M-7 select-window -t 7
bind-key -n M-8 select-window -t 8
bind-key -n M-9 select-window -t 9
bind-key -n M-0 select-window -t 10


set -s user-keys[11] "\e[51;2~"
set -s user-keys[12] "\e[52;2~"
set -s user-keys[13] "\e[53;2~"
set -s user-keys[14] "\e[54;2~"
set -s user-keys[15] "\e[55;2~"
set -s user-keys[16] "\e[56;2~"
set -s user-keys[17] "\e[57;2~"
set -s user-keys[18] "\e[58;2~"
set -s user-keys[19] "\e[59;2~"
set -s user-keys[20] "\e[60;2~"
bind-key -n User11 select-window -t 1
bind-key -n User12 select-window -t 2
bind-key -n User13 select-window -t 3
bind-key -n User14 select-window -t 4
bind-key -n User15 select-window -t 5
bind-key -n User16 select-window -t 6
bind-key -n User17 select-window -t 7
bind-key -n User18 select-window -t 8
bind-key -n User19 select-window -t 9
bind-key -n User20 select-window -t 10



# Ctrl-Alt-p: select pane like vim easymotion do
unbind -n C-M-p
bind -n C-M-p display-panes
# Select pane according to vim mappings
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iq 'vim\\|ssh' || ! zle && tmux send-keys C-h) || tmux select-pane -L" \; refresh-client -S
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iq 'vim\\|ssh' || ! zle && tmux send-keys C-j) || tmux select-pane -D" \; refresh-client -S
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iq 'vim\\|ssh' || ! zle && tmux send-keys C-k) || tmux select-pane -U" \; refresh-client -S
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iq 'vim\\|ssh' || ! zle && tmux send-keys C-l) || tmux select-pane -R" \; refresh-client -S

# Clear screen with Ctrl-b l
bind C-l send-keys C-l
bind l send-keys C-l

#########
# Create
#########
# Tmux tab:
#   Ctrl-Alt-n: at the end
bind -n C-M-n new-window -c "#{pane_current_path}" \; refresh-client -S
set -s user-keys[0] "\e[30;2~"
bind -n User0 new-window -c "#{pane_current_path}" \; refresh-client -S



# bind -n Ctrl-Cmd-n new-window -c "#{pane_current_path}" \; refresh-client -S
#   Ctrl-Alt-a: after current
bind -n C-M-a new-window -a -c "#{pane_current_path}" \; refresh-client -S
set -s user-keys[1] "\e[31;2~"
# unbind User1
bind -n User1 new-window -a -c "#{pane_current_path}" \; refresh-client -S
# Split:
#   Ctrl-Alt-\: vertically with
bind -n C-M-\ split-window -h -c "#{pane_current_path}" \; refresh-client -S
#   Ctrl-Alt--: horizontally with
bind -n C-_ split-window -v -c "#{pane_current_path}" \; refresh-client -S


###########
# Sessions
###########
# <prefix> n: create session
unbind n
bind-key  n new-session \; command-prompt -p "Session name:"  "rename-session %%"
bind-key ^n new-session \; command-prompt -p "Session name:"  "rename-session %%"
# <prefix> x: kill session
unbind x
bind-key  x confirm-before -p "Kill session \"#S\" (y/N)?" "run-shell 'tmux switch-client -n \\\; kill-session -t \"\$(tmux display-message -p \"#S\")\"'"
bind-key ^x confirm-before -p "Kill session \"#S\" (y/N)?" "run-shell 'tmux switch-client -n \\\; kill-session -t \"\$(tmux display-message -p \"#S\")\"'"
# Ctrl-Alt-c: select session

bind -n C-M-c choose-session

set -s user-keys[7] "\e[37;2~"
bind -n User7 choose-session

##############
# Colours
##############
set -g status-bg colour234
set -g status-fg colour1
#{pane_current_path}

set -g status-left '#[bg=colour75, fg=colour59, bold] ###{session_windows} #[fg=colour153,bg=colour59] \
 #S #[default]#[fg=colour246,bg=colour236,nobold,nounderscore,noitalics] \
 #(/usr/local/bin/lua $HOME/.tmux.d/__t_path_center.lua 30 "#{pane_current_path}") '

set-option -g status-right '                                   '

# set-option -g status-right '#[fg=colour246,bg=colour236,nobold,nounderscore,noitalics] #(pwd="#{pane_current_path}"; echo ~${pwd##$HOME})'
# set -g status-left "#[bg=colour75, fg=colour59, bold] #{session_windows} #[default]"
# set-option -g status-right '#[fg=colour59,bg=colour236,nobold,nounderscore,noitalics] #{pane_current_path} #[fg=colour153,bg=colour59] #S #[fg=colour59,bg=colour74]'

# set -g window-status-format         '#[default]#[fg=colour59] #I #(/usr/local/bin/lua $HOME/.tmux.d/__t_path_center.lua 12 "#{b:pane_current_path}" ) '
# set -g window-status-current-format '#[default]#[fg=colour234,bg=green] #I #(/usr/local/bin/lua $HOME/.tmux.d/__t_path_center.lua 12 "#{b:pane_current_path}" ) '
set -g window-status-format         '#[default]#[fg=colour59] #I #{b:pane_current_path}'
set -g window-status-current-format '#[default]#[fg=colour234,bg=green] #I #{b:pane_current_path}'

# set -g window-status-current-format '#[default]#[fg=colour234,bg=green]#I:#(pwd="#{pane_current_path}"; echo ${pwd####*/})#F'
setw -g mode-bg colour75
setw -g mode-fg colour59
set -g message-command-fg "colour153"
set -g message-command-bg "colour59"
set -g message-fg "colour153"
set -g message-bg "colour59"
set -g message-attr bold
set -g pane-border-style fg=colour239,bg=colour239
set -g pane-active-border-style fg=colour247,bg=colour247



bind -n c-m-i command-prompt -p "Enter snippet name: " "send-keys 'pluck(:)' Left"
# bind -n c-m-i command-prompt -p "Enter snippet name: " "send-keys #{echo 1} Left"
